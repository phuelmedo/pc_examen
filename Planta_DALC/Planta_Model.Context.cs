//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Planta_DALC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    public partial class vwPlanta
    {
        public int Id { get; set; }
        public string NombreComun { get; set; }
        public string NombreCientifico { get; set; }
        public string TipoPlanta { get; set; }
        public string Descripcion { get; set; }
        public int TiempoRiego { get; set; }
        public int CantidadAgua { get; set; }
        public string Epoca { get; set; }
        public bool EsVenenosa { get; set; }
        public bool EsAutoctona { get; set; }
    }
    public partial class vwLogin
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }
    public partial class El_SaltoEntities : DbContext
    {
        public El_SaltoEntities()
            : base("name=El_SaltoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<vwLogin> vwLogin { get; set; }
        public virtual DbSet<vwPlanta> vwPlanta { get; set; }
    
        public virtual int spPlantaDeleteById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPlantaDeleteById", idParameter);
        }
    
        public virtual int spPlantaUpdateById(Nullable<int> id, string nombreComun, string nombreCientifico, string tipoPlanta, string descripcion, Nullable<int> tiempoRiego, Nullable<int> cantidadAgua, string epoca, Nullable<bool> esVenenosa, Nullable<bool> esAutoctona)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nombreComunParameter = nombreComun != null ?
                new ObjectParameter("NombreComun", nombreComun) :
                new ObjectParameter("NombreComun", typeof(string));
    
            var nombreCientificoParameter = nombreCientifico != null ?
                new ObjectParameter("NombreCientifico", nombreCientifico) :
                new ObjectParameter("NombreCientifico", typeof(string));
    
            var tipoPlantaParameter = tipoPlanta != null ?
                new ObjectParameter("TipoPlanta", tipoPlanta) :
                new ObjectParameter("TipoPlanta", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var tiempoRiegoParameter = tiempoRiego.HasValue ?
                new ObjectParameter("TiempoRiego", tiempoRiego) :
                new ObjectParameter("TiempoRiego", typeof(int));
    
            var cantidadAguaParameter = cantidadAgua.HasValue ?
                new ObjectParameter("CantidadAgua", cantidadAgua) :
                new ObjectParameter("CantidadAgua", typeof(int));
    
            var epocaParameter = epoca != null ?
                new ObjectParameter("Epoca", epoca) :
                new ObjectParameter("Epoca", typeof(string));
    
            var esVenenosaParameter = esVenenosa.HasValue ?
                new ObjectParameter("EsVenenosa", esVenenosa) :
                new ObjectParameter("EsVenenosa", typeof(bool));
    
            var esAutoctonaParameter = esAutoctona.HasValue ?
                new ObjectParameter("EsAutoctona", esAutoctona) :
                new ObjectParameter("EsAutoctona", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPlantaUpdateById", idParameter, nombreComunParameter, nombreCientificoParameter, tipoPlantaParameter, descripcionParameter, tiempoRiegoParameter, cantidadAguaParameter, epocaParameter, esVenenosaParameter, esAutoctonaParameter);
        }
    
        public virtual int spPlantaSave(string nombreComun, string nombreCientifico, string tipoPlanta, string descripcion, Nullable<int> tiempoRiego, Nullable<int> cantidadAgua, string epoca, Nullable<bool> esVenenosa, Nullable<bool> esAutoctona)
        {
            var nombreComunParameter = nombreComun != null ?
                new ObjectParameter("NombreComun", nombreComun) :
                new ObjectParameter("NombreComun", typeof(string));
    
            var nombreCientificoParameter = nombreCientifico != null ?
                new ObjectParameter("NombreCientifico", nombreCientifico) :
                new ObjectParameter("NombreCientifico", typeof(string));
    
            var tipoPlantaParameter = tipoPlanta != null ?
                new ObjectParameter("TipoPlanta", tipoPlanta) :
                new ObjectParameter("TipoPlanta", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var tiempoRiegoParameter = tiempoRiego.HasValue ?
                new ObjectParameter("TiempoRiego", tiempoRiego) :
                new ObjectParameter("TiempoRiego", typeof(int));
    
            var cantidadAguaParameter = cantidadAgua.HasValue ?
                new ObjectParameter("CantidadAgua", cantidadAgua) :
                new ObjectParameter("CantidadAgua", typeof(int));
    
            var epocaParameter = epoca != null ?
                new ObjectParameter("Epoca", epoca) :
                new ObjectParameter("Epoca", typeof(string));
    
            var esVenenosaParameter = esVenenosa.HasValue ?
                new ObjectParameter("EsVenenosa", esVenenosa) :
                new ObjectParameter("EsVenenosa", typeof(bool));
    
            var esAutoctonaParameter = esAutoctona.HasValue ?
                new ObjectParameter("EsAutoctona", esAutoctona) :
                new ObjectParameter("EsAutoctona", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPlantaSave", nombreComunParameter, nombreCientificoParameter, tipoPlantaParameter, descripcionParameter, tiempoRiegoParameter, cantidadAguaParameter, epocaParameter, esVenenosaParameter, esAutoctonaParameter);
        }
    }
}
